#!/usr/bin/env ruby
require 'gems'

action = ARGV.shift.to_s.strip
project = ARGV.shift.to_s.strip

case action
when 'install'
  gems = Gems.new([project] + ARGV)
  gems.install
when 'uninstall'
  gems = Gems.new([project] + ARGV)
  gems.uninstall
when 'list'
  gems = Gems.new([project] + ARGV)
  gems.list
when 'import'
  gems_config = GemsConfig.new(project)
  gems_file = ARGV.shift.to_s.strip
  gems_config.import_gems(gems_file)
when 'export'
  gems_config = GemsConfig.new(project)
  gems_file = ARGV.shift.to_s.strip
  gems_config.export_gems(gems_file)
when 'projects'
  gems_config = GemsConfig.new(nil)
  gems_config.project_names.each do |project|
    puts project
  end
when 'configure'
  gems_config = GemsConfig.new(project)
  gemname = ARGV.shift
  gems_config.set_gem_options(gemname, ARGV)
when 'add'
  gems_config = GemsConfig.new(project)
  gems_file = ARGV.shift.to_s.strip
  gems_config.add_gems(gems_file)
when 'diff'
  gems = Gems.new([project] + ARGV)
  gems.diff_current
when 'switch'
  gems = Gems.new([project] + ARGV)
  gems.switch_from_current
else 'help'
  puts <<-EOS
Syntax:
  gems <action> <arguments>

Actions and arguments:
  install <name1> [name2 .. nameN]
    Install all missing gems in project name1..nameN.
  uninstall <name1> [name2 .. nameN]
    Uninstall all gems in project name1..nameN.
  diff <name1> [name2 .. nameN]
    See difference between the current gem configuration and that of the union of projects name1..nameN.
  switch <name1> [name2 .. nameN]
    Switch to gem configuration in the union of projects name1..nameN.
    This will preserve all shared gems in the current state and in the target state,
    only installing and uninstalling what is needed.
  list <name1> [name2 .. nameN]
    List all gems in union of projects name1..nameN.
  import <name> <file>
    Import all gems in <file> into project <name>.
    This will overwrite the gems currently in this project.
    The special file 'current' will use the output of `gems list` instead of a file.
  export <name> <file>
    Export all gems in project <name> to <file>.
    The file will be overwritten and can be parsed by the import action.
  add <name> <file>
    Add the gems <file> to project <name>.
  projects
    List all stored project names.
  configure <name> <gem> [option1 option2 option3]
    Configure a specific gem inside a project to use specific options when installing.
  EOS
end
